import asyncio
import docker
import time
import asyncpg
import aiohttp
import subprocess
import os
import sys

PG_IMAGE = "postgres:16"
PG_USER = "user"
PG_PASS = "pass"
PG_DB = "postgres"
PG_PORT = 5432
CONTAINER_NAME = "pg_hypercube_test"
VOLUME_NAME = "pg_hypercube_data"

if sys.platform.startswith("win"):
    import asyncio
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

async def wait_pg_ready(timeout=180):
    """–ñ–¥—ë—Ç, –ø–æ–∫–∞ PostgreSQL –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL...")
    for _ in range(timeout):
        try:
            dsn = os.environ["PG_DSN"]
            conn = await asyncpg.connect(dsn)
            await conn.close()
            print("‚úÖ PostgreSQL –≥–æ—Ç–æ–≤.")
            return True
        except Exception:
            await asyncio.sleep(1)
    raise RuntimeError("‚ùå PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è.")

async def prepare_pg():
    print("üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    dsn = os.environ["PG_DSN"]
    conn = await asyncpg.connect(dsn)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS public.facts_agg (
            p1 INT,
            p2 INT,
            p3 INT,
            count INT,
            updated_at TIMESTAMP DEFAULT now()
        );
    """)
    exists = await conn.fetchval("SELECT COUNT(*) FROM public.facts_agg;")
    if exists == 0:
        print("‚û°Ô∏è –í—Å—Ç–∞–≤–∫–∞ 100k —Å—Ç—Ä–æ–∫ —á–∞–Ω–∫–∞–º–∏ –ø–æ 10k...")
        rows = [(i % 100, i % 50, i % 10, 1) for i in range(100_000)]
        chunk_size = 10_000
        for i in range(0, len(rows), chunk_size):
            #await conn.copy_records_to_table(
            #    "facts_agg",
            #    records=rows[i:i+chunk_size]
            #)
            await conn.executemany("INSERT INTO facts_agg (p1,p2,p3,count) VALUES ($1,$2,$3,$4)", rows)
        print("‚úÖ –í—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    else:
        print(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {exists} —Å—Ç—Ä–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
    await conn.close()


async def run_test(port):
    print(f"üöÄ –ó–∞–ø—É—Å–∫ FastAPI-–ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    proc = subprocess.Popen([sys.executable, "app.py", "--port", str(port)])
    await asyncio.sleep(4)

    base_url = f"http://localhost:{port}"
    async with aiohttp.ClientSession() as s:
        # 1. –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî —Å–æ–∑–¥–∞—ë—Ç –∫—ç—à
        t0 = time.time()
        q1 = "SELECT p1,p2,SUM(count) FROM public.facts_agg GROUP BY p1,p2"
        async with s.post(f"{base_url}/query", json={"sql": q1}) as r:
            await r.text()
        t1 = time.time()
        print(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (build cache): {t1 - t0:.3f} —Å")

        # 2. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî hit
        t0 = time.time()
        async with s.post(f"{base_url}/query", json={"sql": q1}) as r:
            await r.text()
        t1 = time.time()
        print(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (cache hit): {t1 - t0:.3f} —Å")

        # 3. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –≤–≤–µ—Ä—Ö
        q2 = "SELECT p1,SUM(count) FROM public.facts_agg GROUP BY p1"
        t0 = time.time()
        async with s.post(f"{base_url}/query", json={"sql": q2}) as r:
            await r.text()
        t1 = time.time()
        print(f"–ê–≥—Ä–µ–≥–∞—Ü–∏—è '–≤–≤–µ—Ä—Ö' –∏–∑ –ø—Ä–µ–¥-–∞–≥—Ä–µ–≥–∞—Ç–∞: {t1 - t0:.3f} —Å")

    proc.terminate()
    proc.wait()


async def main():
    dcli = docker.from_env()

    print("üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    try:
        old = dcli.containers.get(CONTAINER_NAME)
        print("–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL...")
        old.remove(force=True)
        time.sleep(2)
    except docker.errors.NotFound:
        pass

    # —Å–æ–∑–¥–∞—ë–º volume, –µ—Å–ª–∏ –Ω–µ—Ç
    if not any(v.name == VOLUME_NAME for v in dcli.volumes.list()):
        print(f"üíæ –°–æ–∑–¥–∞—é volume {VOLUME_NAME} (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Postgres)...")
        dcli.volumes.create(name=VOLUME_NAME)

    print("üêò –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL...")
    cont = dcli.containers.run(
        PG_IMAGE,
        name=CONTAINER_NAME,
        detach=True,
        ports={f"{PG_PORT}/tcp": None},
        environment={
            "POSTGRES_USER": PG_USER,
            "POSTGRES_PASSWORD": PG_PASS,
            "POSTGRES_DB": PG_DB,
        },
        volumes={VOLUME_NAME: {'bind': '/var/lib/postgresql/data', 'mode': 'rw'}},
    )

    # –∂–¥–µ–º –ø–æ–∫–∞ Docker –ø—Ä–∏—Å–≤–æ–∏—Ç –ø–æ—Ä—Ç
    for i in range(20):
        cont.reload()
        ports = cont.attrs["NetworkSettings"]["Ports"]
        mapped = ports.get(f"{PG_PORT}/tcp")
        if mapped and isinstance(mapped, list) and mapped[0].get("HostPort"):
            host_port = mapped[0]["HostPort"]
            break
        time.sleep(0.5)
    else:
        raise RuntimeError("‚ùå Docker –Ω–µ —É—Å–ø–µ–ª –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –ø–æ—Ä—Ç 5432/tcp")

    print(f"üîå PostgreSQL –ø—Ä–æ–±—Ä–æ—à–µ–Ω –Ω–∞ –ø–æ—Ä—Ç {host_port} —Ö–æ—Å—Ç–∞")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º DSN
    dsn = f"postgresql://{PG_USER}:{PG_PASS}@localhost:{host_port}/{PG_DB}"
    print(f"{dsn}")
    os.environ["PG_DSN"] = dsn

    # –∂–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    await wait_pg_ready()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ initdb
    logs = cont.logs(tail=20).decode(errors="ignore")
    if "initdb" in logs or "database system is ready" not in logs:
        print("üîÅ –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        cont.restart()
        await wait_pg_ready()

    await prepare_pg()
    await run_test(8000)

    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, volume —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    cont.stop()
    # –Ω–µ —É–¥–∞–ª—è–µ–º volume ‚Äî –±–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤

if __name__ == "__main__":
    asyncio.run(main())
